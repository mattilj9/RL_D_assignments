
Working with Remotes (p. 69)

- Remote repositories are versions of your project that are hosted on the Internet or 
network somewhere. 

- You can have several of them, each of which generally is either read-only or read/write 
for you.


Showing Your Remotes (p. 69)

To see which remote servers you have configured:

- git clone https://github.com/schacon/ticgit
- cd ticgit
- git remote
origin

You can also specify -v, which shows you the URLs that Git has stored for the
shortname to be used when reading and writing to that remote:

- git remote -v

origin https://github.com/schacon/ticgit (fetch)
origin https://github.com/schacon/ticgit (push)

OR

- cd grit
- git remote -v

bakkdoor https://github.com/bakkdoor/grit (fetch)
bakkdoor https://github.com/bakkdoor/grit (push)
cho45 https://github.com/cho45/grit (fetch)
cho45 https://github.com/cho45/grit (push)
defunkt https://github.com/defunkt/grit (fetch)
defunkt https://github.com/defunkt/grit (push)
koke git://github.com/koke/grit.git (fetch)
koke git://github.com/koke/grit.git (push)
origin git@github.com:mojombo/grit.git (fetch)
origin git@github.com:mojombo/grit.git (push)

-> we can pull contributions from any of the users pretty easily
-> We may additionally have permission to push to one or more of these, 
though we can’t tell that here
-> notice that these remotes use a variety of protocols


Adding Remote Repositories (p. 70)

To add a new remote Git repository as a shortname you can reference
easily, run git remote add <shortname> <url>:

- git remote 
origin
- git remote add pb https://github.com/paulboone/ticgit
- git remote -v
origin https://github.com/schacon/ticgit (fetch)
origin https://github.com/schacon/ticgit (push)
pb https://github.com/paulboone/ticgit (fetch)
pb https://github.com/paulboone/ticgit (push)

For example, if you want to fetch all the information that Paul has:

- git fetch pb


Fetching and Pulling from Your Remotes (p. 71)

To get data from your remote projects:

- git fetch [remote-name]
e.g.
- git fetch origin

Pulls down all the data from that remote project that you don’t have yet. 

Note that if you clone a repository, the command automatically adds that remote
repository under the name “origin”, i.e. git fetch origin.

Note that git fetch command only downloads the data to your local repository - 
you have to merge it manually into your work when you’re ready.

Note that you can use the "git pull" command to automatically fetch and then merge 
that remote branch into your current branch.

[Note that running "git pull" generally fetches data from the server you originally cloned  
from and automatically tries to merge it into the code you’re currently working on.]


Pushing to Your Remotes (p. 72)

If you want to push your master branch to your origin server (again, cloning generally 
sets up both of those names for you automatically):

- git push origin master

This command works only if you cloned from a server to which you have
write access and if nobody has pushed in the meantime.

It may be that you’ll have to fetch other persons' work first and incorporate it 
into yours before you’ll be allowed to push.


Inspecting a Remote (p. 72)

To see more information about a particular remote, you can use the command:

- git remote show [remote-name] 
e.g.
- git remote show origin


Removing and Renaming Remotes (p. 73)

To rename pb to paul: 

- git remote rename pb paul
- git remote
origin
paul





